class t{constructor(t,i,s,r){this.separator="Â»",this.province=t,this.subdistrict=i,this.district=s,this.zipcode=r}setGeo(t,i,s){this.districtCode=t,this.subdistrictCode=i,this.provinceCode=s}addressToString(t){return[this.subdistrict,this.district,this.province,this.zipcode].join(` ${t||this.separator} `)}}const i=i=>{let s=[],r=[];const e=[];let o;return i.lookup&&i.words&&(s=i.lookup.split("|"),r=i.words.split("|"),i=i.data),o=t=>{return"number"==typeof t&&(t=s[t]),t.replace(/[A-Z]/gi,(function(t){const i=t.charCodeAt(0);return r[i<97?i-65:26+i-97]}))},i.map(i=>{let s=1;3===i.length&&(s=2),i[s].map(r=>{r[s].map(n=>{n[s]=n[s]instanceof Array?n[s]:[n[s]],n[s].map(c=>{const a=new t(o(i[0]),o(r[0]),o(n[0]),c);2===s&&a.setGeo(n[1]||!1,r[1]||!1,i[1]||!1),e.push(a)})})})}),e};const s=new class{load(t,s,r=!1){let e;e=null==t||void 0===t?"./database/db.json":t;const o=this.loadData(e,s);return"json"===s&&(this.db=r?i(o):o),this.db}loadData(t,i){if("json"===i){return require(t)}throw new Error("This type is not supported!")}};class r{constructor(){this.multilingual=!1,this.language="en"}loadData(t,i,r=!1,e=!0,o){o&&(this.language=o),this.multilingual=r,this.processedDb=s.load(t,i,e)}query(t){const i={district:t.district?new RegExp(t.district.toString().trim(),"g"):/.*/g,province:t.province?new RegExp(t.province.toString().trim(),"g"):/.*/g,subdistrict:t.subdistrict?new RegExp(t.subdistrict.toString().trim(),"g"):/.*/g,zipcode:t.zipcode?new RegExp(t.zipcode.toString().trim(),"g"):/.*/g};if(this.multilingual)try{return this.processedDb.filter(t=>(t[`province_${this.language}`]||" ").toString().match(i.province)&&(t[`subdistrict_${this.language}`]||" ").toString().match(i.subdistrict)&&(t[`district_${this.language}`]||" ").toString().match(i.district)&&(t.zipcode||" ").toString().match(i.zipcode)).map(t=>({district:t[`district_${this.language}`],province:t[`province_${this.language}`],subdistrict:t[`subdistrict_${this.language}`],zipcode:t.zipcode}))}catch(t){return[]}else try{return this.processedDb.filter(t=>(t.province||" ").toString().match(i.province)&&(t.subdistrict||" ").toString().match(i.subdistrict)&&(t.district||" ").toString().match(i.district)&&(t.zipcode||" ").toString().match(i.zipcode))}catch(t){return[]}}queryByType(t,i){return this.uniq_fast(this.query(t),i)}uniq_fast(t,i){const s={},r=[],e=t.length;let o=0;for(let n=0;n<e;n++){const e=t[n][i];1!==s[e]&&(s[e]=1,r[o++]=t[n][i])}return r}}const e=new r;export default e;export{r as AddressService};
